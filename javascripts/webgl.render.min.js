var webgl;
(function(c){var d=function(a,b,c,e,f){this.canvas=a;this.timeStep=b;this.init=c;this.circleFloat32Array=e;this.circleCount=f;this.iterations=1;this.convergedIterations=this.iterationConvergence=0;this.gl=a.getContext("webgl2");this.program=this.gl.createProgram();d.initDevice(this.gl,this.program);this.u_resolutionLoc=this.gl.getUniformLocation(this.program,"u_resolution");this.resize();window.addEventListener("resize",this.resize,!1);c(this.displayWidth,this.displayHeight);a=this.gl.getAttribLocation(this.program,"circleCoord");
this.gl.enableVertexAttribArray(a);this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.gl.createBuffer());this.gl.vertexAttribPointer(a,3,this.gl.FLOAT,!1,12,0);this.lastDrawTime=performance.now()};d.prototype.run=function(){requestAnimationFrame.call(this,this.draw)};d.prototype.draw=function(){var a=performance.now(),b=this.gl;this.updateIterationCount(a-this.lastDrawTime);for(var c=0;c<this.iterations;c++)this.timeStep(this.displayWidth,this.displayHeight);b.bufferData(b.ARRAY_BUFFER,this.circleFloat32Array,
b.DYNAMIC_DRAW);b.drawArrays(b.POINTS,0,this.circleCount);this.lastDrawTime=a;requestAnimationFrame.call(this,this.draw)};d.prototype.updateIterationCount=function(a){17>a&&32>this.iterations?(this.iterationConvergence=0,this.iterations*=2):20>a&&64>this.iterations?(this.iterationConvergence=0,this.iterations++):55<a&&1<this.iterations&&(this.iterationConvergence=0,this.iterations--);10>this.iterationConvergence&&(this.iterationConvergence++,10===this.iterationConvergence&&this.convergedIterations!==
this.iterations&&(this.convergedIterations=this.iterations,console.log("timeStep of "+this.iterations+" iterations/frame, ~"+Math.round(1E3/a)+" frames/sec.")))};d.initDevice=function(a,b){a.attachShader(b,c.shaders.compileShader(a,a.VERTEX_SHADER,c.shaders.VERTEX_SHADER));a.attachShader(b,c.shaders.compileShader(a,a.FRAGMENT_SHADER,c.shaders.FRAGMENT_SHADER));a.linkProgram(b);if(!a.getProgramParameter(b,a.LINK_STATUS))throw"Unable to link program:  "+a.getProgramInfoLog(b);a.useProgram(b);a.blendFunc(a.ONE,
a.ONE_MINUS_SRC_ALPHA);a.enable(a.BLEND)};d.prototype.resize=function(){var a=this.gl.canvas;this.displayWidth=a.clientWidth;this.displayHeight=a.clientHeight;if(a.width!==this.displayWidth||a.height!==this.displayHeight)a.width=this.displayWidth,a.height=this.displayHeight,this.gl.viewport(0,0,this.displayWidth,this.displayHeight),this.gl.uniform2f(this.u_resolutionLoc,a.width,a.height)};c.render=d})(webgl||(webgl={}));
(function(c){(function(c){c.VERTEX_SHADER="#version 300 es\n    in vec3 circleCoord;\n    uniform vec2 u_resolution;\n    out float size;\n    void main () {\n      // convert pixel space to clip space (-1, 1 ranges, flipped y axis)\n      // (https://www.html5rocks.com/en/tutorials/webgl/webgl_fundamentals/)\n      vec2 circle = circleCoord.xy / u_resolution * vec2(2, -2) - vec2(1, -1);\n      gl_Position = vec4(circle, 0, 1);\n      // set circle size from z coord of circleCoord (gl.POINT render option)\n      gl_PointSize = size = circleCoord.z * 2.0 + 1.0;\n    }";c.FRAGMENT_SHADER=
"#version 300 es\n    precision mediump float;\n    in float size;\n    out vec4 outColor;\n    void main () {\n      // distance from center circle circle to current fragment coordinate\n      // gl_PointCoord is just for gl.POINT renders, returning (0-1, 0-1) position from circle\n      float dist = length(gl_PointCoord - vec2(.5, .5)) * 2.0;\n      // only color in circle insides\n      if (dist > 1.0)\n        discard;\n      // anti-aliasing (https://rubendv.be/blog//opengl/drawing-antialiased-circles-in-opengl/)\n      // outer 2 pixels are anti-aliasing, which corresponds to an outer annulus\n      float aliasFrac = (size - 2.0) / size;\n      float alpha = smoothstep(1.0, aliasFrac, dist) * 0.9;\n      outColor = vec4(((size - 2.5) / 100.0), 0.2, 0.3, alpha);\n      // pre-multiply alpha... something about blending edges\n      outColor.rgb *= outColor.a;\n    }";
c.compileShader=function(a,b,c){b=a.createShader(b);a.shaderSource(b,c);a.compileShader(b);if(!a.getShaderParameter(b,a.COMPILE_STATUS))throw"Could not compile shader:  "+a.getShaderInfoLog(b);return b}})(c.shaders||(c.shaders={}))})(webgl||(webgl={}));
